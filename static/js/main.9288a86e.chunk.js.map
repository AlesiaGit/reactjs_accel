{"version":3,"sources":["serviceWorker.js","components/Geolocation/geolocation.js","components/Firebase/firebase.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","navigatorId","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","startingPosition","lat","lng","speed","timestamp","Date","now","getTime","startingAcceleration","x","y","z","line","EARTH_RADIUS","topleft","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","data","canvas","current","setState","context","getContext","collection","get","then","querySnapshot","forEach","doc","JSON","parse","isReceived","console","log","state","startRecording","navigator","geolocation","watchPosition","updatePositionData","err","enableHighAccuracy","timeout","maximumAge","DeviceMotionEvent","addEventListener","updateAccelerationData","ev","acceleration","currentAcceleration","width","drawBackground","index","accel","prop","drawLine","i","toRad","num","Math","PI","calculateDistance","lat1","lng1","lat2","lng2","dLat","dLng","a","sin","cos","atan2","sqrt","value","ctx","axis","beginPath","strokeStyle","moveTo","lineTo","stroke","color","offset","prevPosition","objectSpread","currentPosition","prev","coords","latitude","longitude","distance","time","abs","concat","toConsumableArray","updateResultingData","stopRecording","set","stringify","clearWatch","removeEventListener","showChart","isChart","zoom","React","createRef","react_default","createElement","onClick","disabled","id","height","ref","style","display","position","dist","google","initialCenter","path","strokeColor","strokeOpacity","strokeWeight","Component","GoogleApiWrapper","App","className","ReactDOM","render","src_components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9288a86e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { db } from '../Firebase/firebase';\r\nimport {Map, Polyline, Marker, GoogleApiWrapper} from 'google-maps-react';\r\n\r\nlet navigatorId;\r\nlet startingPosition = {\r\n\tlat: 53.7378391,\r\n\tlng: 27.203723,\r\n\tspeed: 0,\r\n\ttimestamp: new Date(Date.now()).getTime()\r\n};\r\nlet startingAcceleration = {\r\n\tx: 0,\r\n\ty: 0,\r\n\tz: 0\r\n}\r\nlet line = 0;\r\nconst EARTH_RADIUS = 6371000;\r\nvar topleft = 53.977897 + ',' + 27.393723;\r\n\r\nvar test = [\r\n\t{lat: 53.9078391, lng: 27.5028172}, \r\n\t{lat: 53.7378391, lng: 27.2028172},\r\n\t{lat: 53.9078391, lng: 27.5028172}\r\n];\r\n\r\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\r\n \r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {\r\n\t    \tisReceived: false, // обработка загрузки данных\r\n\t    \tisChart: false, // показ значений акселерометра в графике\r\n\t    \tdata: [],\r\n\t    \tcurrentPosition: {...startingPosition}, \r\n\t    \tprevPosition: {...startingPosition},\r\n\t    \tcurrentAcceleration: {...startingAcceleration},\r\n\t    \tcontext: null,\r\n\t    \tzoom: 11\r\n\t    };\r\n\r\n\t    this.canvas = React.createRef();\r\n\t   \r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n  \t\tconst canvas = this.canvas.current;\r\n  \t\tthis.setState({ context: canvas.getContext('2d') });\r\n\r\n\t \tvar data;\r\n\t\tdb.collection(\"coverage\").get().then(querySnapshot => {\r\n\t\t    querySnapshot.forEach(function(doc) {\r\n\t\t    \tif (doc.data().data) {\r\n\t\t    \t\tdata = JSON.parse(doc.data().data);\r\n\t\t    \t} else {\r\n\t\t    \t\tdata = [];\r\n\t\t    \t}\r\n\t\t        \r\n\t\t    });\r\n\t\t}).then(() => {\r\n\t\t\tthis.setState({ \r\n\t\t\t\tcontext: canvas.getContext('2d'),\r\n\t\t\t\tisReceived: true,\r\n\t  \t\t\tdata \r\n\t  \t\t}, () => console.log(this.state.data));\r\n\t\t});\r\n\t}\r\n\r\n\tstartRecording = () => {\r\n\t\tconsole.log(this.state.data);\r\n\r\n\t\tif ('geolocation' in navigator) { // обработка отсутствия\r\n\t\t\tvar options = {\r\n\t\t\t\tenableHighAccuracy: true,\r\n\t\t\t\ttimeout: 1000,\r\n\t\t\t\tmaximumAge: 0\r\n\t\t\t}\r\n \t    \tnavigatorId = navigator.geolocation.watchPosition(this.updatePositionData, this.err, options);\r\n\t    \tif (window.DeviceMotionEvent) window.addEventListener(\"devicemotion\", this.updateAccelerationData); //обработка отсутствия\r\n\t\t}\t\r\n\t}\r\n\r\n\terr = () => {\r\n\t\tconsole.log(\"error\");\r\n\t}\r\n\r\n\tupdateAccelerationData = (ev) => {\r\n\t\tlet x = ev.acceleration.x;\r\n\t\tlet y = ev.acceleration.y;\r\n\t\tlet z = ev.acceleration.z;\r\n\r\n\t\tif (x !== null && y !== null && z !== null) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentAcceleration: { x, y, z}\r\n\t\t\t}, () => {\r\n\t\t\t\tif (line === this.canvas.current.width) line = 0;\r\n\t\t\t\t\r\n\t\t\t\tthis.drawBackground(\"white\", 0);\r\n\r\n\t\t\t\tvar index = 1;\r\n\t\t\t\tlet accel = this.state.currentAcceleration;\r\n\t\t\t\tfor (var prop in accel) {\r\n\t\t\t\t\tthis.drawLine(accel[prop], index);\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t}\r\n\t\t\t\tline++;\r\n\r\n\t\t\t\tthis.drawBackground(\"grey\", 1);\r\n\t\t\t\tfor (var i = 2; i < 8; i++) this.drawBackground(\"white\", i);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\ttoRad = num => {\r\n\t\treturn num * Math.PI/180;\r\n\t}\r\n\r\n\tcalculateDistance = (lat1, lng1, lat2, lng2) => {\r\n\t\tvar dLat = this.toRad(lat2 - lat1);\r\n\t\tvar dLng = this.toRad(lng2 - lng1);\r\n\r\n\t\tvar a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n\r\n\t\tvar distance = EARTH_RADIUS * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\t\t//console.log(distance); // в метрах\r\n\t\treturn distance;\r\n\t}\r\n\r\n\tdrawLine = (value, index) => {\r\n\t\tlet ctx = this.state.context;\r\n\t\tvar axis = index * 100 - 50;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle=\"black\";\r\n\t\tctx.moveTo(line, axis + value * 5);\r\n\t\tctx.lineTo(line, axis);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\tdrawBackground = (color, offset) => {\r\n\t\tlet ctx = this.state.context;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = color;\r\n\t\tctx.moveTo(line + offset, 0);\r\n\t\tctx.lineTo(line + offset, 300);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\tupdatePositionData = (location) => {\r\n\t\t//var test = {...this.state.currentPosition};\r\n\r\n\t\tthis.setState({\r\n\t\t\tprevPosition: {...this.state.currentPosition}\r\n\t\t}, () => {\r\n\t\t\tvar prev = this.state.prevPosition;\r\n\r\n\t\t\t//console.log(\"prev\");\r\n\t\t\t//console.log(this.state.prevPosition);\r\n\r\n\t\t\tvar lat = location.coords.latitude;\r\n\t\t\tvar lng = location.coords.longitude;\r\n\t\t\tvar timestamp = location.timestamp;\r\n\r\n\t\t\tvar distance = this.calculateDistance(prev.lat, prev.lng, lat, lng); // в метрах\r\n\t\t\tvar time = (prev.timestamp - timestamp)/ 1000; // в секундах\r\n\t\t\tvar speed = Math.abs(distance/time);\r\n\r\n\t\t\tthis.setState({\t\r\n\t\t\t\tcurrentPosition: { lat,\tlng, speed,\ttimestamp },\r\n\t\t\t\tdata: [...this.state.data, { lat, lng }]\r\n\t\t\t}, () => {\r\n\t\t\t\tconsole.log(this.state.data);\r\n\t\t\t\t//console.log(\"after\");\r\n\t\t\t\t//console.log(this.state.currentPosition);\r\n\t\t\t});\r\n\t\t});\t\t\r\n\t}\r\n\r\n\tupdateResultingData = () => {\r\n\t\t\r\n\t}\r\n\r\n\tstopRecording = () => {\r\n\t\tconsole.log(\"stopped\");\r\n\t\tconsole.log(this.state.data);\r\n\r\n\r\n\t\tdb.collection(\"coverage\").doc(topleft).set({data: JSON.stringify(this.state.data)});\r\n\r\n\t\tnavigator.geolocation.clearWatch(navigatorId);\r\n\t\twindow.removeEventListener(\"devicemotion\", this.updateAccelerationData);\r\n\t}\r\n\r\n\tshowChart = () => {\r\n\t\tthis.setState({isChart: !this.state.isChart});\r\n\t}\r\n\r\n\t  render() {\r\n\t    return (\r\n\t    <div>\r\n\t    \t<button onClick={this.startRecording} disabled={!this.state.isReceived}>Start recording</button>\r\n\t    \t<button onClick={this.showChart}>Show chart</button>\r\n\t    \t<div>lat={this.state.currentPosition.lat}</div>\r\n\t    \t<div>lng={this.state.currentPosition.lng}</div>\r\n\t    \t<div>speed={this.state.currentPosition.speed}</div>\r\n\t    \t<canvas id=\"canvas\" width=\"400\" height=\"300\" ref={this.canvas} style={{display: this.state.isChart ? \"block\" : \"none\"}}/>\r\n\t    \t<div id=\"map\" style={{width: \"400px\", height: \"300px\", position: \"relative\"}}>\r\n\t    \t\t<Map\r\n\t\t          google={this.props.google}\r\n\t\t          style={{width: \"100%\", height: \"100%\", position: \"relative\"}}\r\n\t\t          zoom={11}\r\n\t\t          initialCenter={this.state.currentPosition}\r\n\t\t        >\r\n\t\t        \t<Polyline\r\n\t\t\t        \tpath={this.state.data}\r\n\t\t\t        \tstrokeColor=\"#0000FF\"\r\n\t\t\t        \tstrokeOpacity={0.8}\r\n\t\t\t        \tstrokeWeight={2} \r\n\t\t\t        />\r\n\t\t\t       \r\n\t\t        </Map>\r\n\t    \t</div>\r\n\t    \t<button onClick={this.stopRecording}>Stop recording</button>\r\n\t    </div>\r\n\t    );\r\n\t  }\r\n}\r\n\r\n//export default Geolocation;\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyAxb5QU5mete251oQLxJgElz6Pgv_P9LGQ\"\r\n})(Geolocation)\r\n\r\n// <Marker position={{lat: 53.7378391, lng: 27.2028172}} />\r\n// <Marker position={{lat: 53.9078391, lng: 27.5028172}} />","// import app from 'firebase/app';\r\n// import 'firebase/database';\r\n\r\n// const config = {\r\n//     apiKey: \"AIzaSyBexhCuV6JNCsyakFOeBK7NmFb_oM_pgxo\",\r\n//     authDomain: \"bumpyroadsinformer.firebaseapp.com\",\r\n//     databaseURL: \"https://bumpyroadsinformer.firebaseio.com\",\r\n//     projectId: \"bumpyroadsinformer\",\r\n//     storageBucket: \"\",\r\n//     messagingSenderId: \"854546127925\",\r\n//     appId: \"1:854546127925:web:d3c2a81c7c4e9ba6\"\r\n// };\r\n\r\n// class Firebase {\r\n//   constructor() {\r\n//     app.initializeApp(config);\r\n\r\n//     this.db = app.firestore();\r\n//   }\r\n\r\n//   coverage = () => this.db.ref('coverage');\r\n// }\r\n\r\n// export default Firebase;\r\n\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBexhCuV6JNCsyakFOeBK7NmFb_oM_pgxo\",\r\n    authDomain: \"bumpyroadsinformer.firebaseapp.com\",\r\n    databaseURL: \"https://bumpyroadsinformer.firebaseio.com\",\r\n    projectId: \"bumpyroadsinformer\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"854546127925\",\r\n    appId: \"1:854546127925:web:d3c2a81c7c4e9ba6\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/geolocation';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocation/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\n//import {db} from './components/Firebase/firebase';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}