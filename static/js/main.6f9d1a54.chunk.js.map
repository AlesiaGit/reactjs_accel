{"version":3,"sources":["Geolocation/Geolocation.js","App.js","serviceWorker.js","index.js"],"names":["navigatorId","initVal","line","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","historicAccelValues","concat","toConsumableArray","state","currentAccelValues","canvas","current","context","getContext","startRecording","navigator","geolocation","watchPosition","updateLatestPoint","window","DeviceMotionEvent","addEventListener","updateAccelValues","ev","acceleration","x","y","z","toFixed","length","slice","redrawCanvas","index","value","drawLine","clearRect","width","height","beginPath","forEach","prop","axis","moveTo","lineTo","stroke","location","latestPoint","lat","coords","latitude","lng","longitude","updateList","stopRecording","clearWatch","removeEventListener","list","React","createRef","react_default","a","createElement","onClick","id","ref","Component","App","className","src_Geolocation_Geolocation","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f9d1a54.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet navigatorId;\r\nlet initVal = 0;\r\nlet line = 0;\r\n\r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {\r\n\t    \tlist: [],\r\n\t    \tlatestPoint: {\r\n\t    \t\tlat: initVal.toFixed(6),\r\n\t    \t\tlng: initVal.toFixed(6)\r\n\t    \t},\r\n\t    \thistoricAccelValues: [],\r\n\t    \tcurrentAccelValues: {\r\n\t    \t\tx: 0,\r\n\t    \t\ty: 0,\r\n\t    \t\tz: 0\r\n\t    \t},\r\n\t    \tcontext: null\r\n\t    };\r\n\r\n\t    this.canvas = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\t// this.setState({\r\n  // \t\t\tlist: [...this.state.list, \r\n  // \t\t\t{\r\n  // \t\t\t\tlat: this.state.latestPoint.lat, \r\n  // \t\t\t\tlng: this.state.latestPoint.lng,\r\n  // \t\t\t\tx: this.state.currentAccelValues.x,\r\n  // \t\t\t\ty: this.state.currentAccelValues.y,\r\n  // \t\t\t\tz: this.state.currentAccelValues.z\r\n  // \t\t\t}]\r\n  // \t\t});\r\n  \t\tthis.setState({\r\n  \t\t\thistoricAccelValues: [...this.state.historicAccelValues, this.state.currentAccelValues]\r\n  \t\t})\r\n\r\n  \t\tconst canvas = this.canvas.current;\r\n  \t\tthis.setState({\r\n  \t\t\tcontext: canvas.getContext('2d')\r\n  \t\t})\r\n\t}\r\n\r\n\tstartRecording = () => {\r\n\t\t//localStorage.removeItem(\"track\");\r\n\t\tif ('geolocation' in navigator) {\r\n\t    \tnavigatorId = navigator.geolocation.watchPosition(this.updateLatestPoint);\r\n\r\n\t    \tif (window.DeviceMotionEvent) {\r\n\t\t\t\twindow.addEventListener(\"devicemotion\", this.updateAccelValues);\r\n\t\t\t} \r\n\t\t}\t\r\n\t}\r\n\r\n\tupdateAccelValues = (ev) => {\r\n\t\t\tif (ev.acceleration.x !== null && ev.acceleration.y !== null && ev.acceleration.z !== null) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcurrentAccelValues: {\r\n\t\t\t\t\t\tx: ev.acceleration.x.toFixed(4),\r\n\t\t\t\t\t\ty: ev.acceleration.y.toFixed(4),\r\n\t\t\t\t\t\tz: ev.acceleration.z.toFixed(4)\r\n\t\t\t\t\t}\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\tif (this.state.historicAccelValues.length > 40) {\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\thistoricAccelValues: [...this.state.historicAccelValues.slice(1), this.state.currentAccelValues]\r\n\t\t\t\t\t\t}, () => this.redrawCanvas());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar index = 1;\r\n\t\t\t\t\t\tfor (var value in this.state.currentAccelValues) {\r\n\t\t\t\t\t\t\tthis.drawLine(value, index);\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tline++;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tredrawCanvas = () => {\r\n\t\tlet canvas = this.canvas.current;\r\n\t\tthis.state.context.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\tthis.state.context.beginPath();\r\n\r\n\t\tline = 0;\r\n\t\tthis.state.historicAccelValues.forEach(value => {\r\n\t\t\tvar index = 1;\r\n\t\t\tfor (var prop in value) {\r\n\t\t\t\tthis.drawLine(prop, index);\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tline++;\r\n\t\t})\r\n\t}\r\n\r\n\tdrawLine = (value, index) => {\r\n\t\tvar axis = index * 100 - 50;\t\t\r\n\t\tthis.state.context.moveTo(line, axis + value * 5);\r\n\t\tthis.state.context.lineTo(line, axis);\r\n\t\tthis.state.context.stroke();\r\n\t}\r\n\r\n\tupdateLatestPoint = (location) => {\r\n\t\tthis.setState({\r\n\t\t\tlatestPoint: {\r\n\t\t\t\tlat: location.coords.latitude.toFixed(6),\r\n\t\t\t\tlng: location.coords.longitude.toFixed(6)\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tupdateList = () => {\r\n\t\t// this.setState({\r\n  // \t\t\tlist: [...this.state.list, \r\n  // \t\t\t{\r\n  // \t\t\t\tlat: this.state.latestPoint.lat, \r\n  // \t\t\t\tlng: this.state.latestPoint.lng,\r\n  // \t\t\t\tx: this.state.currentAccelValues.x,\r\n  // \t\t\t\ty: this.state.currentAccelValues.y,\r\n  // \t\t\t\tz: this.state.currentAccelValues.z\r\n  // \t\t\t}]}, () => console.log(this.state.list));\r\n\t}\r\n\r\n\tstopRecording = () => {\r\n\t\t//localStorage.setItem(\"track\", JSON.stringify(this.state.list));\r\n\t\tnavigator.geolocation.clearWatch(navigatorId);\r\n\t\twindow.removeEventListener(\"devicemotion\", this.updateAccelValues);\r\n\t}\r\n\r\n\t  render() {\r\n\t    return (\r\n\t    <div>\r\n\t    \t<button onClick={this.startRecording}>Start recording</button>\r\n\t    \t<div>lat={this.state.latestPoint.lat}, lng={this.state.latestPoint.lng} </div>\r\n\t    \t<canvas id=\"canvas\" width=\"400\" height=\"300\" ref={this.canvas}/>\r\n\t    \t<button onClick={this.stopRecording}>Stop recording</button>\r\n\t    </div>\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default Geolocation;\r\n\r\n//<ul>{this.state.list.map((coords, i) => (<li key={i}>Current position: lat = {coords.latitude}, long = {coords.longitude}</li>))}</ul>\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/Geolocation'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocation/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}