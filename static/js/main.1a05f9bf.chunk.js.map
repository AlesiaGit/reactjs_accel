{"version":3,"sources":["Geolocation/Geolocation.js","App.js","serviceWorker.js","index.js"],"names":["navigatorId","initVal","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","list","concat","toConsumableArray","state","lat","latestPoint","lng","x","accelValues","y","z","startRecording","navigator","geolocation","watchPosition","updateLatestPoint","window","DeviceMotionEvent","addEventListener","updateAccelValues","ev","accel","acceleration","updateList","location","coords","latitude","toFixed","longitude","console","log","stopRecording","localStorage","setItem","JSON","stringify","clearWatch","removeEventListener","react_default","a","createElement","onClick","Component","App","className","src_Geolocation_Geolocation","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a05f9bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet navigatorId;\r\nlet initVal = 0;\r\n\r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {\r\n\t    \tlist: [],\r\n\t    \tlatestPoint: {\r\n\t    \t\tlat: initVal.toFixed(6),\r\n\t    \t\tlng: initVal.toFixed(6)\r\n\t    \t},\r\n\t    \taccelValues: {\r\n\t    \t\tx: 0,\r\n\t    \t\ty: 0,\r\n\t    \t\tz: 0\r\n\t    \t}\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.setState({\r\n  \t\t\tlist: [...this.state.list, \r\n  \t\t\t{\r\n  \t\t\t\tlat: this.state.latestPoint.lat, \r\n  \t\t\t\tlng: this.state.latestPoint.lng,\r\n  \t\t\t\tx: this.state.accelValues.x,\r\n  \t\t\t\ty: this.state.accelValues.y,\r\n  \t\t\t\tz: this.state.accelValues.z\r\n  \t\t\t}]\r\n  \t\t});\r\n\t}\r\n\r\n\tstartRecording = () => {\r\n\t\t//localStorage.removeItem(\"track\");\r\n\t\tif ('geolocation' in navigator) {\r\n\t    \tnavigatorId = navigator.geolocation.watchPosition(this.updateLatestPoint);\r\n\r\n\t    \tif (window.DeviceMotionEvent) {\r\n\t\t\t\twindow.addEventListener(\"devicemotion\", this.updateAccelValues);\r\n\t\t\t} \r\n\t\t}\t\r\n\t}\r\n\r\n\tupdateAccelValues = (ev) => {\r\n\t\tvar accel = ev.acceleration;\r\n\t\tif (accel.x > 0.5 || accel.y > 0.5 || accel.z > 0.5) {\r\n\t\t\tthis.setState({\r\n\t\t\t\taccelValues: {\r\n\t\t\t\t\tx: ev.acceleration.x,\r\n\t\t\t\t\ty: ev.acceleration.y,\r\n\t\t\t\t\tz: ev.acceleration.z\r\n\t\t\t\t}\r\n\t\t\t}, () => this.updateList());\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tupdateLatestPoint = (location) => {\r\n\t\tthis.setState({\r\n\t\t\tlatestPoint: {\r\n\t\t\t\tlat: location.coords.latitude.toFixed(6),\r\n\t\t\t\tlng: location.coords.longitude.toFixed(6)\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tupdateList = () => {\r\n\t\tthis.setState({\r\n  \t\t\tlist: [...this.state.list, \r\n  \t\t\t{\r\n  \t\t\t\tlat: this.state.latestPoint.lat, \r\n  \t\t\t\tlng: this.state.latestPoint.lng,\r\n  \t\t\t\tx: this.state.accelValues.x,\r\n  \t\t\t\ty: this.state.accelValues.y,\r\n  \t\t\t\tz: this.state.accelValues.z\r\n  \t\t\t}]}, () => console.log(this.state.list));\r\n\t}\r\n\r\n\tstopRecording = () => {\r\n\t\tlocalStorage.setItem(\"track\", JSON.stringify(this.state.list));\r\n\t\tnavigator.geolocation.clearWatch(navigatorId);\r\n\t\twindow.removeEventListener(\"devicemotion\", this.updateAccelValues);\r\n\t}\r\n\r\n\t  render() {\r\n\t    return (\r\n\t    <div>\r\n\t    \t<button onClick={this.startRecording}>Start recording</button>\r\n\t    \t<div>Lat: {this.state.list.lat}\tLng: {this.state.list.lng} </div>\r\n\t    \t<div>{this.state.list.x}</div>\r\n\t    \t<button onClick={this.stopRecording}>Stop recording</button>\r\n\t    </div>\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default Geolocation;\r\n\r\n//<ul>{this.state.list.map((coords, i) => (<li key={i}>Current position: lat = {coords.latitude}, long = {coords.longitude}</li>))}</ul>","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/Geolocation'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocation/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}