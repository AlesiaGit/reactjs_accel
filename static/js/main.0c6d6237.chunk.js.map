{"version":3,"sources":["Geolocation/Geolocation.js","App.js","serviceWorker.js","index.js"],"names":["navigatorId","initVal","line","EARTH_RADIUS","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","historicAccelValues","concat","toConsumableArray","state","currentAccelValues","canvas","current","context","getContext","startRecording","navigator","geolocation","watchPosition","updateLatestPoint","window","DeviceMotionEvent","addEventListener","updateAccelValues","ev","acceleration","x","y","z","toFixed","width","index","value","drawBackground","drawLine","i","toRad","num","Math","PI","calculateDistance","lat1","lng1","lat2","lng2","dLat","dLng","a","sin","cos","distance","atan2","sqrt","console","log","axis","ctx","beginPath","strokeStyle","moveTo","lineTo","stroke","color","offset","location","coords","speed","prevPoint","latestPoint","prev","lat","latitude","lng","longitude","time","timestamp","abs","updateList","stopRecording","clearWatch","removeEventListener","list","Date","now","getTime","React","createRef","react_default","createElement","onClick","id","height","ref","Component","App","className","src_Geolocation_Geolocation","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c6d6237.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet navigatorId;\r\nlet initVal = 0;\r\nlet line = 0;\r\nconst EARTH_RADIUS = 6371000;\r\n\r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {\r\n\t    \tlist: [],\r\n\t    \tlatestPoint: {\r\n\t    \t\tlat: initVal.toFixed(6),\r\n\t    \t\tlng: initVal.toFixed(6),\r\n\t    \t\tspeed: initVal.toFixed(6),\r\n\t    \t\ttimestamp: new Date(Date.now()).getTime()\r\n\t    \t}, \r\n\t    \tprevPoint: {\r\n\t    \t\tlat: initVal.toFixed(6),\r\n\t    \t\tlng: initVal.toFixed(6),\r\n\t    \t\tspeed: initVal.toFixed(6),\r\n\t    \t\ttimestamp: new Date(Date.now()).getTime()\r\n\t    \t},\r\n\t    \thistoricAccelValues: [],\r\n\t    \tcurrentAccelValues: {\r\n\t    \t\tx: 0,\r\n\t    \t\ty: 0,\r\n\t    \t\tz: 0\r\n\t    \t},\r\n\t    \tcontext: null\r\n\t    };\r\n\r\n\t    this.canvas = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\t// this.setState({\r\n  // \t\t\tlist: [...this.state.list, \r\n  // \t\t\t{\r\n  // \t\t\t\tlat: this.state.latestPoint.lat, \r\n  // \t\t\t\tlng: this.state.latestPoint.lng,\r\n  // \t\t\t\tx: this.state.currentAccelValues.x,\r\n  // \t\t\t\ty: this.state.currentAccelValues.y,\r\n  // \t\t\t\tz: this.state.currentAccelValues.z\r\n  // \t\t\t}]\r\n  // \t\t});\r\n  \t\tthis.setState({\r\n  \t\t\thistoricAccelValues: [...this.state.historicAccelValues, this.state.currentAccelValues]\r\n  \t\t})\r\n\r\n  \t\tconst canvas = this.canvas.current;\r\n  \t\tthis.setState({\r\n  \t\t\tcontext: canvas.getContext('2d')\r\n  \t\t})\r\n\t}\r\n\r\n\tstartRecording = () => {\r\n\t\t//localStorage.removeItem(\"track\");\r\n\t\tif ('geolocation' in navigator) {\r\n\r\n\t    \tnavigatorId = navigator.geolocation.watchPosition(this.updateLatestPoint);\r\n\r\n\t    \tif (window.DeviceMotionEvent) {\r\n\t\t\t\twindow.addEventListener(\"devicemotion\", this.updateAccelValues);\r\n\t\t\t} \r\n\t\t}\t\r\n\t}\r\n\r\n\r\n\tupdateAccelValues = (ev) => {\r\n\t\t\tif (ev.acceleration.x !== null && ev.acceleration.y !== null && ev.acceleration.z !== null) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcurrentAccelValues: {\r\n\t\t\t\t\t\tx: ev.acceleration.x.toFixed(4),\r\n\t\t\t\t\t\ty: ev.acceleration.y.toFixed(4),\r\n\t\t\t\t\t\tz: ev.acceleration.z.toFixed(4)\r\n\t\t\t\t\t}\r\n\t\t\t\t}, () => {\r\n\r\n\t\t\t\t\tif (line === this.canvas.current.width) line = 0;\r\n\r\n\t\t\t\t\tvar index = 1;\r\n\t\t\t\t\tthis.drawBackground(\"white\", 0);\r\n\t\t\t\t\tfor (var value in this.state.currentAccelValues) {\r\n\t\t\t\t\t\tthis.drawLine(this.state.currentAccelValues[value], index);\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tline++;\r\n\r\n\t\t\t\t\tthis.drawBackground(\"red\", 1);\r\n\t\t\t\t\tfor (var i = 2; i < 5; i++) this.drawBackground(\"white\", i);\r\n\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\ttoRad = num => {\r\n\t\treturn num*Math.PI/180;\r\n\t}\r\n\r\n\tcalculateDistance = (lat1, lng1, lat2, lng2) => {\r\n\t\tvar dLat = this.toRad(lat2 - lat1);\r\n\t\tvar dLng = this.toRad(lng2 - lng1);\r\n\r\n\t\tvar a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n\r\n\t\tvar distance = EARTH_RADIUS * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\t\tconsole.log(distance); // в метрах\r\n\t\treturn distance;\r\n\t}\r\n\r\n\tdrawLine = (value, index) => {\r\n\t\tvar axis = index * 100 - 50;\r\n\t\tlet ctx = this.state.context;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle=\"black\";\r\n\t\tctx.moveTo(line, axis + value * 5);\r\n\t\tctx.lineTo(line, axis);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\tdrawBackground = (color, offset) => {\r\n\t\tlet ctx = this.state.context;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle=color;\r\n\t\tctx.moveTo(line + offset, 0);\r\n\t\tctx.lineTo(line + offset, 300);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\tupdateLatestPoint = (location) => {\r\n\t\tvar speed = location.coords.speed === null ? 0 : location.coords.speed;\r\n\t\tthis.setState({\r\n\t\t\tprevPoint: this.state.latestPoint\r\n\t\t}, () => {\r\n\t\t\t//console.log(this.state.prevPoint);\r\n\t\t\tvar prev = this.state.prevPoint;\r\n\t\t\tvar lat = location.coords.latitude;\r\n\t\t\tvar lng = location.coords.longitude;\r\n\t\t\tvar distance = this.calculateDistance(prev.lat, prev.lng, lat, lng); // в метрах\r\n\t\t\tvar time = (prev.timestamp - location.timestamp)/(60 * 1000); // в минутах\r\n\t\t\tvar speed = Math.abs(distance/time);\r\n\t\t\t//console.log(prev.timestamp + \",\" + location.timestamp);\r\n\t\t\tconsole.log(speed);\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tlatestPoint: {\r\n\t\t\t\t\tlat: lat.toFixed(6),\r\n\t\t\t\t\tlng: lng.toFixed(6),\r\n\t\t\t\t\tspeed: speed.toFixed(4),\r\n\t\t\t\t\ttimestamp: location.timestamp\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\t\t\r\n\t}\r\n\r\n\tupdateList = () => {\r\n\t\t// this.setState({\r\n  // \t\t\tlist: [...this.state.list, \r\n  // \t\t\t{\r\n  // \t\t\t\tlat: this.state.latestPoint.lat, \r\n  // \t\t\t\tlng: this.state.latestPoint.lng,\r\n  // \t\t\t\tx: this.state.currentAccelValues.x,\r\n  // \t\t\t\ty: this.state.currentAccelValues.y,\r\n  // \t\t\t\tz: this.state.currentAccelValues.z\r\n  // \t\t\t}]}, () => console.log(this.state.list));\r\n\t}\r\n\r\n\tstopRecording = () => {\r\n\t\t//localStorage.setItem(\"track\", JSON.stringify(this.state.list));\r\n\t\tnavigator.geolocation.clearWatch(navigatorId);\r\n\t\twindow.removeEventListener(\"devicemotion\", this.updateAccelValues);\r\n\t}\r\n\r\n\t  render() {\r\n\t    return (\r\n\t    <div>\r\n\t    \t<button onClick={this.startRecording}>Start recording</button>\r\n\t    \t<div>lat={this.state.latestPoint.lat}, lng={this.state.latestPoint.lng}, speed={this.state.latestPoint.speed} </div>\r\n\t    \t<canvas id=\"canvas\" width=\"400\" height=\"300\" ref={this.canvas}/>\r\n\t    \t<button onClick={this.stopRecording}>Stop recording</button>\r\n\t    </div>\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default Geolocation;\r\n\r\n//<ul>{this.state.list.map((coords, i) => (<li key={i}>Current position: lat = {coords.latitude}, long = {coords.longitude}</li>))}</ul>\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/Geolocation'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocation/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}