{"version":3,"sources":["Geolocation/Geolocation.js","App.js","serviceWorker.js","index.js"],"names":["id","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initGeo","navigator","geolocation","watchPosition","updatePos","location","setState","list","concat","toConsumableArray","state","coords","clearWatch","react_default","a","createElement","onClick","map","i","key","latitude","Component","App","className","src_Geolocation_Geolocation","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"8IAEIA,4FAqCWC,cAlCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIVQ,QAAU,WACL,gBAAiBC,YACjBX,EAAKW,UAAUC,YAAYC,cAAcV,EAAKW,aAPhCX,EAWnBW,UAAY,SAACC,GACZZ,EAAKa,SAAS,CACXC,KAAI,GAAAC,OAAAd,OAAAe,EAAA,EAAAf,CAAMD,EAAKiB,MAAMH,MAAjB,CAAuBF,EAASM,YAbrBlB,EAiBnBmB,WAAa,WACZX,UAAUC,YAAYU,WAAWtB,IAhB9BG,EAAKiB,MAAQ,CAACH,KAAM,IAFLd,wEAsBf,OACAoB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAQC,QAASpB,KAAKI,SAAtB,oBACAa,EAAAC,EAAAC,cAAA,UAAKnB,KAAKc,MAAMH,KAAKU,IAAI,SAACN,EAAQO,GAAT,OACvBL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,GAAIP,EAAOS,aAEtBP,EAAAC,EAAAC,cAAA,UAAQC,QAASpB,KAAKgB,YAAtB,sBA7BoBS,aCUXC,mLARX,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACS,EAAD,cAJUH,aCQEI,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBhC,WACrBA,UAAUiC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.29487397.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet id;\r\n\r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {list: []};\r\n\t}\r\n\r\n\tinitGeo = () => {\r\n\t\tif ('geolocation' in navigator) {\r\n\t    \tid = navigator.geolocation.watchPosition(this.updatePos);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tupdatePos = (location) => {\r\n\t\tthis.setState({\r\n  \t\t\tlist: [...this.state.list, location.coords]\r\n  \t\t});\r\n\t}\r\n\r\n\tclearWatch = () => {\r\n\t\tnavigator.geolocation.clearWatch(id);\r\n\t}\r\n\r\n\t  render() {\r\n\t    return (\r\n\t    <div>\r\n\t    \t<button onClick={this.initGeo}>Ask for location</button>\r\n\t    \t<ul>{this.state.list.map((coords, i) => (\r\n\t    \t\t\t<li key={i}>{coords.latitude}</li>\r\n\t    \t\t))}</ul>\r\n\t    \t<button onClick={this.clearWatch}>Stop watch</button>\r\n\t    </div>\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default Geolocation;","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/Geolocation'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocation/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}