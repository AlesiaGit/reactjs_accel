{"version":3,"sources":["Geolocation/Geolocation.js","App.js","serviceWorker.js","index.js"],"names":["navigatorId","startingPosition","lat","lng","speed","timestamp","Date","now","getTime","startingAcceleration","x","y","z","line","EARTH_RADIUS","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","canvas","current","setState","context","getContext","startRecording","navigator","geolocation","watchPosition","updatePositionData","err","enableHighAccuracy","timeout","maximumAge","window","DeviceMotionEvent","addEventListener","updateAccelerationData","console","log","ev","acceleration","currentAcceleration","width","drawBackground","index","accel","state","prop","drawLine","i","toRad","num","Math","PI","calculateDistance","lat1","lng1","lat2","lng2","dLat","dLng","a","sin","cos","atan2","sqrt","value","ctx","axis","beginPath","strokeStyle","moveTo","lineTo","stroke","color","offset","location","prevPosition","objectSpread","currentPosition","prev","coords","latitude","longitude","distance","time","abs","updateResultingData","stopRecording","clearWatch","removeEventListener","data","React","createRef","react_default","createElement","onClick","id","height","ref","Component","App","className","src_Geolocation_Geolocation","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96e17a3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet navigatorId;\r\nlet startingPosition = {\r\n\tlat: 0,\r\n\tlng: 0,\r\n\tspeed: 0,\r\n\ttimestamp: new Date(Date.now()).getTime()\r\n};\r\nlet startingAcceleration = {\r\n\tx: 0,\r\n\ty: 0,\r\n\tz: 0\r\n}\r\nlet line = 0;\r\nconst EARTH_RADIUS = 6371000;\r\n\r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {\r\n\t    \tdata: [],\r\n\t    \tcurrentPosition: {...startingPosition}, \r\n\t    \tprevPosition: {...startingPosition},\r\n\t    \tcurrentAcceleration: {...startingAcceleration},\r\n\t    \tcontext: null,\r\n\t    };\r\n\r\n\t    this.canvas = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n  \t\tconst canvas = this.canvas.current;\r\n  \t\tthis.setState({ context: canvas.getContext('2d') });\r\n\t}\r\n\r\n\tstartRecording = () => {\r\n\t\tif ('geolocation' in navigator) { // обработка отсутствия\r\n\t\t\tvar options = {\r\n\t\t\t\tenableHighAccuracy: false,\r\n\t\t\t\ttimeout: 2000,\r\n\t\t\t\tmaximumAge: 1000\r\n\t\t\t}\r\n \t    \tnavigatorId = navigator.geolocation.watchPosition(this.updatePositionData, this.err, options);\r\n\t    \tif (window.DeviceMotionEvent) window.addEventListener(\"devicemotion\", this.updateAccelerationData); //обработка отсутствия\r\n\t\t}\t\r\n\t}\r\n\r\n\terr = () => {\r\n\t\tconsole.log(\"error\");\r\n\t}\r\n\r\n\tupdateAccelerationData = (ev) => {\r\n\t\tlet x = ev.acceleration.x;\r\n\t\tlet y = ev.acceleration.y;\r\n\t\tlet z = ev.acceleration.z;\r\n\r\n\t\tif (x !== null && y !== null && z !== null) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentAcceleration: { x, y, z}\r\n\t\t\t}, () => {\r\n\t\t\t\tif (line === this.canvas.current.width) line = 0;\r\n\t\t\t\t\r\n\t\t\t\tthis.drawBackground(\"white\", 0);\r\n\r\n\t\t\t\tvar index = 1;\r\n\t\t\t\tlet accel = this.state.currentAcceleration;\r\n\t\t\t\tfor (var prop in accel) {\r\n\t\t\t\t\tthis.drawLine(accel[prop], index);\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t}\r\n\t\t\t\tline++;\r\n\r\n\t\t\t\tthis.drawBackground(\"grey\", 1);\r\n\t\t\t\tfor (var i = 2; i < 8; i++) this.drawBackground(\"white\", i);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\ttoRad = num => {\r\n\t\treturn num * Math.PI/180;\r\n\t}\r\n\r\n\tcalculateDistance = (lat1, lng1, lat2, lng2) => {\r\n\t\tvar dLat = this.toRad(lat2 - lat1);\r\n\t\tvar dLng = this.toRad(lng2 - lng1);\r\n\r\n\t\tvar a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n\r\n\t\tvar distance = EARTH_RADIUS * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\t\t//console.log(distance); // в метрах\r\n\t\treturn distance;\r\n\t}\r\n\r\n\tdrawLine = (value, index) => {\r\n\t\tlet ctx = this.state.context;\r\n\t\tvar axis = index * 100 - 50;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle=\"black\";\r\n\t\tctx.moveTo(line, axis + value * 5);\r\n\t\tctx.lineTo(line, axis);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\tdrawBackground = (color, offset) => {\r\n\t\tlet ctx = this.state.context;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = color;\r\n\t\tctx.moveTo(line + offset, 0);\r\n\t\tctx.lineTo(line + offset, 300);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\tupdatePositionData = (location) => {\r\n\t\t//var test = {...this.state.currentPosition};\r\n\r\n\t\tthis.setState({\r\n\t\t\tprevPosition: {...this.state.currentPosition}\r\n\t\t}, () => {\r\n\t\t\tvar prev = this.state.prevPosition;\r\n\r\n\t\t\tconsole.log(\"prev\");\r\n\t\t\tconsole.log(this.state.prevPosition);\r\n\r\n\t\t\tvar lat = location.coords.latitude;\r\n\t\t\tvar lng = location.coords.longitude;\r\n\t\t\tvar timestamp = location.timestamp;\r\n\r\n\t\t\tvar distance = this.calculateDistance(prev.lat, prev.lng, lat, lng); // в метрах\r\n\t\t\tvar time = (prev.timestamp - timestamp)/ 1000; // в секундах\r\n\t\t\tvar speed = Math.abs(distance/time);\r\n\r\n\t\t\tthis.setState({\tcurrentPosition: { lat,\tlng, speed,\ttimestamp }}, () => {\r\n\t\t\t\tconsole.log(\"after\");\r\n\t\t\t\tconsole.log(this.state.currentPosition);\r\n\t\t\t});\r\n\t\t});\t\t\r\n\t}\r\n\r\n\tupdateResultingData = () => {\r\n\t\t// this.setState({\r\n\t\t// \tdata: [...this.state.data, { /*результирующие данные*/}]\r\n\t\t// });\r\n\t}\r\n\r\n\tstopRecording = () => {\r\n\t\tnavigator.geolocation.clearWatch(navigatorId);\r\n\t\twindow.removeEventListener(\"devicemotion\", this.updateAccelerationData);\r\n\t}\r\n\r\n\t  render() {\r\n\t    return (\r\n\t    <div>\r\n\t    \t<button onClick={this.startRecording}>Start recording</button>\r\n\t    \t<div>lat={this.state.currentPosition.lat}</div>\r\n\t    \t<div>lng={this.state.currentPosition.lng}</div>\r\n\t    \t<div>speed={this.state.currentPosition.speed}</div>\r\n\t    \t<canvas id=\"canvas\" width=\"400\" height=\"300\" ref={this.canvas}/>\r\n\t    \t<button onClick={this.stopRecording}>Stop recording</button>\r\n\t    </div>\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default Geolocation;\r\n\r\n//<ul>{this.state.data.map((coords, i) => (<li key={i}>Current position: lat = {coords.latitude}, long = {coords.longitude}</li>))}</ul>\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/Geolocation'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocation/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}